<html>

<head>
<title>DoPC-Curso de Java. Seccion 9.2</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">

<meta name="Microsoft Border" content="b"></head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<h3>Sección 9.2: Punteros y series en C++</h3>

<hr width="50%">

<p>UN PUNTERO ES EXACTAMENTE UNA DIRECCION de una situación de memoria. En Java, los
punteros juegan un importante papel en la forma de referenciar objetos. Una variable Java
de tipo objeto, almacena la referencia al objeto, que es justamente el puntero de la
dirección de memoria en donde se encuentra situado el objeto. Cuando en el programa
emplea una variable tipo objeto, el ordenador, automáticamente sigue el puntero
almacenado en la variable para poder encontrar el objeto en la memoria. Dado que todo esto
se hace automáticamente, sin que el programa se entere, realmente no se ha tenido que
preocupar demasiado por el hecho de que los objetos se referenciaran por punteros.</p>

<p>En C++, todo lo relacionado con punteros, se hace mas explícito. Algunas variables
pueden almacenar punteros, pero solo las variables que son del tipo <tt>pointer</tt>.
Cuando utiliza una variable puntero, el ordenador no sigue el puntero automáticamente, si
quiere que el ordenador siga al puntero, debe utilizar una notación especial para
decírselo. Puede crear un nuevo objeto y hacer que una variable puntero quede apuntando a
el, utilizando el operador <tt>new</tt> de forma similar a como se utilizaba en Java. Pero
mientras que Java manejaba los objetos de forma automática cuando el programa le decía
que hiciera algo con ellos,&nbsp; en C++ es el programador el responsable de seguir la
pista a los objetos creados con este operador y eliminarlos cuando ya no los necesite.
Para poder hacer esto ultimo, se facilita otro operador llamado <tt>delete</tt>. En
cualquier caso, el trabajar con punteros de forma explicita presenta bastante dificultad y
genera fácilmente errores, y generalmente se considera una forma de programación
avanzada. Desgraciadamente, en C++, hay muy pocas cosas que puedan hacerse sin utilizar
punteros (no a menos que utilice otra característica avanzada del lenguaje, o utilice
clases que de alguna manera han sido escritas por usted).</p>

<hr width="50%">

<p>Suponga que <tt>T</tt> es el nombre de un tipo en C++.Entonces hay un tipo de puntero
llamado <tt>T* </tt>que representa la variable que puede almacenar punteros a objetos del
tipo<tt> T</tt>: (De hecho C++ permite punteros a todo tipo de valores. Por ejemplo existe
un puntero tipo <tt>int*</tt> que representa punteros a números <tt>int</tt>. Una
variable de tipo <tt>int*</tt> almacena la dirección de memoria en la que hay almacenado
un numero entero). Suponga que <tt>T</tt> es un tipo y que <tt>ptr</tt> es una variable de
tipo <tt>T*</tt>. Cuando en el programa utiliza <tt>ptr</tt> se refiere al valor actual
del puntero, esto es, la dirección de memoria que esta contenida en <tt>ptr</tt>. Para
referirse al objeto que esta almacenado en esa dirección, deberá utilizar la notación <tt>*ptr</tt>.(C++
utiliza la constante predefinida NULL, en letras mayúsculas, como valor de un puntero que
no apunte a ningún sitio. Se produce un error cuando se referencia <tt>*ptr</tt> y el
valor de <tt>ptr</tt> es <tt>NULL</tt>).</p>

<p>La notación para definir una variable ptr del tipo <tt>T*</tt> es:</p>

<pre>		T *ptr;</pre>

<p>Entonces, para declarar <tt>iptr</tt> como una variable del tipo puntero-a-entero
deberá decir:</p>

<pre>		int *iptr;</pre>

<p>La notación &quot;<tt>T *ptr</tt>&quot; quiere indicar que el valor de <tt>*ptr</tt>
es de tipo <tt>T</tt>. Pero dese cuenta que la variable que esta declarando es <tt>ptr</tt>,
no <tt>*ptr</tt>.</p>

<p>Los tipos de parámetros de subrutina también pueden ser punteros. Por ejemplo , a
continuación hay una subrutina que intercambia dos números almacenados en dos posiciones
de memoria. Estos punteros son del tipo puntero-a-int.</p>

<pre>		void swap (int *x, int *y) {
			int temp;
			temp = *x  //copia el valor apuntado por x en temp
			*x = *y    //copia el valor apuntado por y en la
				   //posición indicada por x
			*y = temp  //copia el valor de temp en la dirección
				   //apuntada por y
		}</pre>

<p>Al final de la subrutina, <tt>x </tt>e <tt>y</tt> apuntan a la misma dirección de
memoria que apuntaban antes, pero los valores existentes en esas direcciones han cambiado.</p>

<p>Todo esto es mas interesante cuando se conoce el operador de dirección, que se escribe
como &amp;. Suponga que <tt>x</tt> es una variable. Entonces, <tt>&amp;x</tt> es la
notación que permite conocer la dirección en memoria de <tt>x</tt>. Esto es, <tt>&amp;x</tt>
es un puntero que apunta a <tt>x</tt>. Considere el siguiente fragmento del programa C++:</p>

<pre>	int x = 7;  // x es una variable entera con valor inicial 7
	int *iptr;  // iptr es una variable que puede almacenar un puntero
		    // a un entero
	iptr = &amp;x;  //iptr es ahora un puntero a x, lo que significa que
		    // *iptr y x se refieren a la misma posición de memoria
	*iptr += 3; // suma 3 al valor almacenado en la situación *iptr
	cout &lt;&lt; x;  //imprime el valor de x que será 10</pre>

<p>Dado que <tt>*iptr</tt> y <tt>x</tt> de refieren a la misma posición de memoria,
sumarle 3 a <tt>*iptr</tt> realmente es lo mismo que sumarle 3 al valor de <tt>x</tt>. Por
lo que el valor de <tt>x</tt> que se imprimirá será 7 + 3.</p>

<p>Suponga que combinamos el operador de dirección con la rutina <tt>swap()</tt> definida
anteriormente. Considere el ejemplo:</p>

<pre>	int a,b;
	a = 17;
	b = 42;
	swap(&amp;a, &amp;b);</pre>

<p>La llamada a la subrutina es correcta ya que <tt>&amp;a</tt> y <tt>&amp;b</tt> son
punteros a enteros,. Esto es, son del tipo <tt>int*</tt>, y es el tipo que espera la
subrutina como parámetros. El resultado final de este ejemplo es que los valores
originales de <tt>a</tt> y <tt>b</tt> se han intercambiado. El valor final para <tt>a </tt>es
42, y el valor final para <tt>b</tt> es 17. Aunque usted no lo crea, utilizar punteros y
direcciones como estas, es la forma usual de escribir subrutinas que cambian el valor de
las variables.( En la programación en lenguaje C, esa es la única forma. C++ facilita
algo que permite una alternativa mas elegante y que lo comentaremos a continuación.
Observe que en Java es imposible escribir una subrutina que realice una tarea semejante a <tt>swap()</tt>,
dado que no existe nada semejante a un puntero-a-int. Naturalmente que en Java y también
como en C++, puede hacer cosas semejantes con objetos y referencias a objetos</p>

<p>Probablemente, los punteros se emplean mas a menudo que las clases, pero aplazare la
discusión hasta la siguiente sección.</p>

<hr width="50%">

<h3>Referencias y paso de parámetros por referencias</h3>

<p>En C++, es posible escribir una referencia que pueda cambiar el valor almacenado en una
variable que se utiliza como parámetro de la subrutina, Aquí tiene una modificación de
la rutina <tt>swap()</tt> que lo hace:</p>

<pre>		void swap(int&amp; x, int&amp; y) {
			int temp = x;
			x = y;
			y = temp;
		}</pre>

<p>El tipo <tt>int&amp;</tt> que se especifica en la subrutina como forma de los
parámetros <tt>x</tt> e <tt>y</tt> se llama tipo referencia. Si <tt>T</tt> es un tipo en
C++, puede crear su tipo referencia como <tt>T&amp;</tt>. Realmente puede declarar
variables utilizando tipos referencia pero nunca he visto un uso practico para hacerlo
excepto el el pase de parámetros y ocasionalmente el el tipo de retorno de una función.Cuando
un tipo de parámetro se declara como referencia, se dice que el parámetro se pasa por
referencia. El efecto de pasar parámetros por <font color="#808000">referencia</font> es
que la rutina puede cambiar el valor almacenado realmente en el parámetro pasado. Esto
es, si la subrutina <tt>swap()</tt> se define así, utilizando el paso por referencia,
entonces&nbsp; la subrutina <tt>swap(a,b) </tt>puede<tt> </tt>intercambiar los valores de
las variables<tt> a </tt>y <tt>b.</tt> Por otra parte, considere la subrutina</p>

<pre>		void failToSwap(int x, int y) {
			int temp = c;
			x = y
			y = temp;
		}</pre>

<p>En este caso, la instrucción de llamada a la subrutina <tt>failToSwap(a,b)</tt> no
tiene ningún efecto en los valores almacenados en <tt>a</tt> y <tt>b</tt>. Los valores de
los parámetros reales, son <strong>copiados</strong> en los parámetros formales <tt>x</tt>
e <tt>y</tt> cuando se llama a la subrutina, luego, esta intercambia los valores de <tt>x</tt>
e <tt>y</tt> pero esto no tiene ningún efecto sobre los almacenados en <tt>a</tt> y <tt>b</tt>
. Se dice que los parámetros de <tt>failToSwap()</tt> están pasados por valor.</p>

<p>Cuando se pasa un parámetro por referencia, lo que realmente se esta traspasando a la
subrutina es la referencia, o el puntero hacia el parámetro real. El efecto es similar al
que se muestra en la primera versión de <tt>Swap()</tt>, en el que se pasa el puntero
explícito. Pero en el paso por referencia, el puntero se maneja de forma implícita.</p>

<p>En Java, todos los punteros se traspasan por valor, por lo que no hay forma de escribir
subrutinas que intercambien los valores contenidos en dos variables. De forma general, en
Java, una subrutina nunca puede cambiar el valor de las variables que se le pasan como
parámetros. Esto es todo un trauma para los programadores que vienen de otros
lenguajes..(Este atento: en Java, cuando una variable <strong>objeto</strong> se pasa como
parámetro el valor almacenado en la variable es una referencia al objeto. El valor de la
instancia de la variable en el objeto, <strong>puede</strong> ser cambiado por la
subrutina, sin embargo, la referencia almacenada en la variable no puede ser cambiada.
Cuando la subrutina finalice, la variable seguirá refiriéndose a la misma posición de
memoria pero el valor del objeto almacenado en esta posición puede haber cambiado. Esto
significa que los objetos se pasan en Java como referencias, mientras que las variables
no.)</p>

<hr width="50%">

<h3>Series</h3>

<p>En C++, las series , superficialmente son similares a las de Java. Una serie es
exactamente una lista de valores indexados, donde el índice puede ir desde 0 hasta algún
máximo. Pero en C++, una variable se serie se considera únicamente como un puntero al
primer elemento de la serie. De hecho, las variables de serie y las variables de puntero
se pueden intercambiar. Por ejemplo, si <tt>list</tt> es una variable de serie, puede
utilizar tanto <tt>list[0]</tt> o <tt>*list</tt> para referirse al primer elemento de la
serie. Y puede utilizar una instrucción de asignación para copiar el valor de una
variable de serie en una variable de puntero.</p>

<p>En C++ las series se crean utilizando el operador <tt>new</tt>, exactamente igual que
en Java. Por ejemplo, para crear una serie de 100 <tt>int</tt>s, puede decir tanto</p>

<pre>              int list[] = new int[100];</pre>

<p>o como</p>

<pre>              int *list = new int[100];</pre>

<p>(Note, sin embargo, que la notación para declarar una variable de series &quot;<tt>int
list</tt>[]&quot;, no &quot;<tt>int[] list</tt>&quot;. En Java eran correctas ambas
notaciones pero yo prefiero la ultima)</p>

<p>También es posible crear series sin utilizar el operador <tt>new</tt>:</p>

<pre>               int list[100];  // declara una serie de 100 ints</pre>

<p><br>
La principal diferencia entre las series creadas con el operador <tt>new</tt>&nbsp; es que
disponen del operador <tt>delete</tt> para poder liberar memoria. Las series creadas con
esta ultima notación no disponen de el, y de hecho no pueden ser destruidas. Muchos
programadores principiantes de C++ querrán empezar a usar las series bastante antes de
aprender a utilizar el operador <tt>new</tt>.</p>

<p>Aunque en C++ a una serie se le define una longitud, el ordenador no controla esta
longitud de ninguna manera, y no hay nada que le impida intentar referirse a posiciones de
la serie que no existen.De esta manera, las series y los punteros en general, son una
fuente inagotable de errores en los programas C++.</p>

<hr width="50%">

<h3>Strings y series de caracteres.</h3>

<p>En C++ una string se considera una serie de caracteres. Por consiguiente, una string
tendrá como tipo <tt>char[]</tt>.Dado que los tipos de series y punteros se consideran
equivalentes, también podemos considerar una string como de tipo <tt>char*</tt> que es el
puntero de <tt>char</tt>. Generalmente, en realidad, una string se considera que es de
tipo <tt>char*</tt>.</p>

<p>Dado que en C++ una string es justamente una serie de caracteres, podemos manipular la
string con la notación de las series. Por ejemplo, si <tt>str</tt> es una variable de
string, <tt>str[i]</tt> se refiere al carácter i-enésimo de la string. Puede cambiar un
carácter de la string utilizando una instrucción de asignación en el elemento apropiado
de la serie. Por ejemplo, si <tt>str</tt> es la string &quot;bit&quot;, la instrucción de
asignación <tt>str[1]</tt>=<tt>'e'</tt> cambiara el valor de <tt>str</tt> a
&quot;bet&quot;. (En Java el carácter i-enésimo de una string <tt>str</tt> se referencia
como <tt>str.chartAt(i)</tt>,&nbsp; y no hay forma de cambiar el carácter de una string.)</p>

<p>En C++ no existe la clase <tt>String</tt> y los strings no son objetos. Por ello no
existen métodos de clase para operar con ellos. En su lugar existen un gran numero de
subrutinas pensadas para trabajar con strings en el fichero de cabecera <tt>string.h</tt></p>

<p>Puesto que las strings son series y dado que el ordenador no controla la longitud de
las series, el ordenador no conoce la longitud de la string. Sin embargo, por convención,
en C++ se asume que finaliza una string cuando aparece un carácter nulo (el carácter con
código ASCII cero). El carácter nulo, no se considera parte de la string, Es,
exactamente la marca de fin de string. Esta convención se utiliza cuando se inicializa
una variable de string. Por ejemplo, si dice</p>

<pre>               char *greeting = &quot;Hola Mundo&quot;;</pre>

<p>el ordenador crea una serie con 11 caracteres, y no con los 10 que necesita para
guardar la string.Los caracteres desde <tt>greeting[0]</tt> hasta <tt>greeting[9]</tt> son
los caracteres desde la 'H' hasta la 'o'&nbsp; de la string que ha especificado. El
ordenador añade el carácter nulo en la ultima posición,<tt>greeting[10]</tt>, para
marcar el fina de la string </p>

<hr>

<table border="0" width="100%" height="62" style="border-top: medium ridge">
  <tr>
    <td width="33%" height="58"><a href="seccion1_5.htm" tppabs="http://members.nbci.com/elcurso/Capitulo1/seccion1_5.htm"><img src="atras.gif" tppabs="http://members.nbci.com/elcurso/images/atras.gif" alt="Anterior" border="0" align="right" style="margin-top: 0px; margin-bottom: 0px" WIDTH="62" HEIGHT="62"></a></td>
    <td width="33%" height="58"><p align="center">&nbsp;&nbsp;&nbsp;&nbsp; <a href="indice1.htm" tppabs="http://members.nbci.com/elcurso/Capitulo1/indice1.htm"><img src="bicap.jpg" tppabs="http://members.nbci.com/elcurso/images/bicap.jpg" width="67" height="69" alt="Indice del Capitulo" border="0"></a><a href="indice.htm" tppabs="http://members.nbci.com/elcurso/indice.htm"><img src="bigen.jpg" tppabs="http://members.nbci.com/elcurso/images/bigen.jpg" width="66" height="68" alt="Indice General" border="0"></a></td>
    <td width="34%" height="58"><a href="seccion1_7.htm" tppabs="http://members.nbci.com/elcurso/Capitulo1/seccion1_7.htm"><img src="siguiente.gif" tppabs="http://members.nbci.com/elcurso/images/siguiente.gif" alt="Siguiente" align="left" border="0" WIDTH="57" HEIGHT="57"></a></td>
  </tr>
</table>
&nbsp;<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

</td></tr><!--msnavigation--></table></body>
</html>

<html>

<head>
<title>DoPC-Curso de Java.Seccion 1.4</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">

<meta name="keywords" content="formacion, Java, gratis, programacion, internet, curso">
<meta name="description" content="Curso de programacion en lenguaje Java. Principios de los ordenadores, bases de la programacion, ideas generales sobre internet, protocolos de comunicacion, bases del lenguaje java, programacion avanzada en Java.">
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<meta name="distribution" content="global">
<meta name="resource-type" content="document">
<meta name="robots" content="all">
<meta name="Microsoft Border" content="b"></head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<h3>Sección 1.4: Partes básicas de la estructura de un programa</h3>

<hr>

<p>Hay dos grandes áreas en la programación: datos e instrucciones. Para trabajar con
los datos, debe conocer que son las variables (<font color="#808000">variables</font>)&nbsp;
y los tipos (<font color="#808000">types</font>); para trabajar con las instrucciones, es
preciso conocer las estructuras de control (<font color="#808000">control structures</font>)
y las subrutinas (<font color="#808000">subroutines</font>). Emplearemos una gran parte
del curso en conseguir que estos conceptos les sean familiares.</p>

<p>Las<font color="#808000"> variables</font>, son precisamente una posición de memoria
(o varias posiciones tratadas como un bloque) a las que se les da un nombre determinado
para que el programador pueda referirse a ellas mas fácilmente, cuando las tenga que usar
en el programa. El programador, solo se ha de preocupar del nombre, es el compilador el
responsable de mantener el control de la posición de memoria. Pero el programador
necesita recordar el nombre que le ha dado a esa especie de caja creada en la memoria para
guardar datos.</p>

<p>En Java y en muchos otros lenguajes, las variables se definen con un tipo (<font color="#808000">type</font>) que indica la clase de datos que se van a guardar. Un tipo de
variable puede ser para guardar números enteros (<font color="#808000">integer</font>) --
conjunto de números tales como el 3, -7, 0, ...-- mientras que otro puede servir para
guardar los números con posiciones decimales (<font color="#808000">floating point</font>)--
números con decimales como 3,14, -2,7, o 17,0. (Si, el ordenado ve diferente el entero 17
que el decimal 17,0; realmente dentro del ordenador tienen un aspecto bastante distinto).
También hay un tipo para caracteres individuales ('A',?.?,...), y cadenas (<font color="#808000">strings</font>) (&quot;Hello&quot;, &quot;Una string, puede contener
muchos caracteres&quot;,...) y tipos menos comunes como fechas, colores, sonidos, o
cualquier otro tipo de dato que el programa necesite guardar.</p>

<p>Los lenguajes de programación, siempre disponen de comandos para guardar y recuperar
los datos de las variables, así como para manipularlos. Por ejemplo las sentencias de
asignación que pueden aparecer en un programa Java, pueden hacer que el ordenador tome el
numero guardado en la variable llamada &quot;principal&quot;, la multiplique por el numero
0,07, y almacene el resultado en una variable llamada &quot;interés&quot;.</p>

<p align="center">interés = principal * 0,07;</p>

<p align="left">También existen los comandos de entrada para leer datos del usuario o
desde ficheros en disco, y los comandos de salida que permitirán enviar los datos en
otras direcciones.</p>

<p align="left">Los comandos básicos -- para mover datos de un sitio a otro y para
realizar cálculos -- forman los bloques de todos los programas. Estos bloques se van
combinando en programas mas complejos por medio de las estructuras de control y las
subrutinas.</p>

<hr width="50%">

<p>Un programa es una secuencia de instrucciones. Normalmente el ordenador ejecuta las
instrucciones en la secuencia en que van apareciendo, una tras otra.Sin embargo,
obviamente esto es algo muy limitado:el programa debe poder alterar la secuencia de
ejecución de estas instrucciones. Las estructuras de control (<font color="#808000">control
structures</font>) son instrucciones especialmente definidas para cambiar el flujo del
programa. Hay dos tipos básicos de estructuras de control: <font color="#808000">loops</font>,
que hacen que una secuencia de instrucciones se repita una y otra vez, y <font color="#808000">branches</font>, que permiten al ordenador decidir entre dos o mas caminos
en función de una condición que ocurre durante la ejecución del programa.</p>

<p>Por ejemplo, puede ser que si el valor de la variable &quot;principal&quot; es mayor
que 10000, el &quot;Interés&quot; deba ser calculado multiplicando la variable principal
por 0,05; si no, el interés será calculado multiplicando el principal por 0,04. El
programa necesita alguna forma para expresar este tipo de decisión. En Java se hace
utilizando la instrucción &quot;if&quot;:</p>

<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <p>if (principal &gt; 10000) <br>
          &nbsp;&nbsp;&nbsp; interés=principal*0,05; <br>
          else<br>
          &nbsp;&nbsp;&nbsp; interés=principal*0,04;</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<p>(No se preocupe por los detalles ahora. Solamente recuerde que el ordenador puede
comprobar una condición y decidir donde continua en base al resultado de la condición)</p>

<p>Los<font color="#808000"> loops </font>se emplean cuando el mismo conjunto de
instrucciones, han de ejecutarse mas de una vez. Por ejemplo, si quiere imprimir una
etiqueta de correos para cada uno de los nombres de una lista, deberá decir,&quot;Tomar
el primer nombre y dirección e imprimir la etiqueta; tomar el segundo nombre y dirección
e imprimir etiqueta; tomar el tercer nombre y dirección e imprimir etiqueta...&quot; Pero
esta forma de hacerlo, es ridícula -- y además puede no funcionar si no conoce por
anticipado el numero de nombres que tiene.Puede que le interesara decir algo como esto
&quot;Mientras (<font color="#808000">while</font>) haya nombres para procesar, tome el
nuevo (<font color="#808000">next</font>) nombre y dirección, e imprima una
etiqueta&quot; Los bucles pueden ser utilizados en los programas para expresar este tipo
de repeticiones.</p>

<hr width="50%">

<p>Los grandes programas, pueden llegar a ser tan complejos, que seria casi imposible
poderlos escribir, si no existiera una forma de fraccionarlos en trozos mas manejables.
Las subrutinas proporcionan la mejor forma de hacerlo. Una subrutina consiste en un
conjunto de instrucciones que se deben realizar algunas veces, montadas juntas y agrupadas
bajo un nombre.</p>

<p>Este nombre podrá ser usado como sustituto del conjunto de instrucciones. Por ejemplo,
suponga que una de las tareas de su programa es dibujar una cada en la pantalla. Puede
escribir las instrucciones adecuadas, hacer con ellas una subrutina, y darle un nombre
apropiado,--digamos &quot;drawHouse()&quot;, En cualquier punto del programa donde
necesite dibujar una casa, puede utilizar un sencillo comando:</p>

<p align="center">drawHouse();</p>

<p align="left">Y tendrá el mismo efecto que repetir en ese lugar todas las instrucciones
que agrupo en la subrutina.</p>

<p align="left">La ventaja de esto, no es solamente lo que se ahorra tecleando.
Organizando su programa en subrutinas, también le ayuda a organizar sus ideas y hacer que
el programa se diseñe sin esfuerzo. Mientras escribe la subrutina para dibujar la casa,
puede concentrarse únicamente en el problema de dibujar la casa, sin preocuparse por el
momento sobre el resto del programa. Y una vez ha terminado de escribir la subrutina,
puede olvidar toda la problemática del dibujo-- el problema ya esta resuelto, porque
tiene una subrutina para hacerlo. La subrutina, llega a convertirse en una parte muy
importante de la estructura del programa, al permitir ir resolviendo las tareas por parte,
y luego dejarlas ocultas por las subrutinas.</p>

<hr width="50%">

<p>Las variables, tipos bucles, desvíos y subrutinas, son la base de lo que se puede
llamar &quot;programación tradicional&quot;.Sin embargo, cuando los programas son
grandes, se necesitan estructuras auxiliares que ayuden a manejar su complejidad. Una de
las mas efectivas herramientas ha sido encontrar la programación orientada a objetos, que
se describe en la siguiente sección.</p>

<hr>

<table border="0" width="100%" height="62">
  <tr>
    <td width="33%" height="58"><a href="seccion1_3.htm" tppabs="http://members.nbci.com/elcurso/Capitulo1/seccion1_3.htm"><img src="atras.gif" tppabs="http://members.nbci.com/elcurso/images/atras.gif" alt="Anterior" border="0" align="right" style="margin-top: 0px; margin-bottom: 0px" WIDTH="63" HEIGHT="63"></a></td>
    <td width="33%" height="58"><p align="center">&nbsp;&nbsp;&nbsp;&nbsp; <a href="indice1.htm" tppabs="http://members.nbci.com/elcurso/Capitulo1/indice1.htm"><img src="bicap.jpg" tppabs="http://members.nbci.com/elcurso/images/bicap.jpg" width="63" height="65" alt="Indice del capítulo" border="0"></a>&nbsp; <a href="indice.htm" tppabs="http://members.nbci.com/elcurso/indice.htm"><img src="bigen.jpg" tppabs="http://members.nbci.com/elcurso/images/bigen.jpg" width="62" height="64" alt="wpe2.jpg (2690 bytes)" border="0"></a></td>
    <td width="34%" height="58"><a href="seccion1_5.htm" tppabs="http://members.nbci.com/elcurso/Capitulo1/seccion1_5.htm"><img src="siguiente.gif" tppabs="http://members.nbci.com/elcurso/images/siguiente.gif" alt="Siguiente" align="left" border="0" WIDTH="59" HEIGHT="59"></a></td>
  </tr>
</table>
&nbsp;<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

</td></tr><!--msnavigation--></table></body>
</html>

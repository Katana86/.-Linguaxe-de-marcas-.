<html>

<head>
<title>DoPC-Curso de Java.Seccion 4.2</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">

<meta name="Microsoft Border" content="b"></head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<h3>Sección 4.2 : Constructores</h3>

<hr>

<p>EN JAVA LOS TIPOS DE OBJETO SON MUY DIFERENTES a los tipos primitivos. La simple
declaración de una variable cuyo tipo se define como clase, no crea automáticamente un
objeto de esa clase. Los objetos se deben <font color="#808000">construir</font> de forma
explícita. El proceso de construir un objeto representa primero, encontrar memoria
disponible en el área <em>heap</em> que pueda emplearse para guardar el objeto y,
segundo, rellenar el objeto con las variables instanciables. Como programador, normalmente
querrá ejercer algún control sobre el valor inicial que se almacena el las instancias de
las variables de este objeto. Hay dos maneras de hacerlo. La primera es proporcionar el
valor inicial en la definición de clase en donde se declaran las variables instanciables.
Por ejemplo, considere la clase:</p>

<pre>         class Mosaic {

             // la clase que representa &quot;mosaics&quot; consiste en
             // cuadrados coloreados alineados en filas y columnas

             int ROWS = 10; // numero de cuadrados por fila
             int COLS = 20; // número de cuadrados por columna
             .
             .   // (resto de la definición de la clase)
             .
          }</pre>

<p>Cuando se crea un objeto tipo <tt>Mosaic</tt> incluye dos variables instanciables
llamadas <tt>ROWS</tt> y <tt>COLS</tt>, que se han inicializado con los valores 10 y 20
respectivamente. De esta manera, cada vez que se cree un objeto nuevo ,<tt>msc</tt>, de
tipo <tt>Mosaic</tt>, el valor de <tt>msc.ROWS</tt> será 10 y el valor de <tt>msc.COLS</tt>
será 20. ( Naturalmente, no hay nada que le impida cambiar estos valores, una vez se haya
creado el objeto.)</p>

<p>Si no quiere facilitar el valor inicial de una variable instanciable, por defecto, el
valor inicial&nbsp; de la instancia de una variable tipo numérico (<tt>int, double,...</tt>)
&nbsp; es cero, una <tt>boolean</tt> se inicializa a <tt>False</tt>, y una <tt>char</tt>
al carácter de Unicode con numero de código cero.</p>

<p>Una variable instanciable, a su vez también puede ser de tipo Objeto. Para esas
variables, el valor inicial es <tt>null</tt>. (En particular, y dado que <tt>String</tt>
es un objeto, el valor inicial por defecto de una variable de este tipo será <tt>null</tt>).
Naturalmente que si quiere, puede proporcionarles valores iniciales alternativos. Por
ejemplo, la clase <tt>Mosaic</tt> puede contener una variable instanciable de tipo <tt>MosaicWindow</tt>,
siendo <tt>MosaicWindow</tt> el nombre de otra clase. La instancia de la variable puede
ser inicializada como un nuevo objeto de tipo <tt>MosaicWindow</tt> de la siguiente
manera:</p>

<pre>         class Mosaic {
             int ROWS = 10; //numero de cuadros por fila
             int COLS = 20; // numero de cuadros por columna
             MosaicWindow window = new MosaicWindow(); 
                           // la ventana para presentar el mosaico
             .
             .   // (el resto de la definición de la clase)
             .
          }</pre>

<p>Cuando se construye un objeto de la clase <tt>Mosaic</tt>, automáticamente se
construye otro objeto de la clase <tt>MosaicWindow</tt> y la referencia al nuevo <tt>MosaicWindow</tt>
se almacena en la instancia de la variable llamada <tt>window</tt> (Observe que la
instrucción &quot;<tt>MosaicWindow window = new MosaicWindow();</tt>&quot; no se ejecuta
hasta que no se crea el objeto de la clase <tt>Mosaic</tt>. Y se ejecuta cada vez que se
crea un nuevo objeto de la clase <tt>Mosaic</tt>, lo que quiere decir que cada objeto <tt>Mosaic</tt>
tiene <strong>su propio </strong>objeto <tt>MosaicWindow.)</tt></p>

<hr width="50%">

<p>Existe una segunda manera de llenar con valores iniciales las instancias de las
variables de una clase. Se hace facilitando uno o mas <font color="#808000">constructores</font>
por clase. De hecho, los constructores pueden hacer mas cosas que rellenar la instancia de
las variables.Pueden realizar cualquier acción que necesite se ejecute cada vez que se
crea un objeto de la clase.</p>

<p>El constructor de una clase se define como una subrutina con el mismo nombre de la
clase y que no devuelve valor, sin necesidad de <tt>void</tt>. Un constructor puede tener
parámetros. En una clase puede haber varios constructores, creados con diferentes firmas
(esto es, creados con diferente numero o tipos de parámetros). Un constructor no puede
ser declarado como <tt>static</tt>, pero por otra parte, no es realmente un método
instanciable. La única forma con la que se puede llamar a un constrictor es con el
operador <tt>new</tt>. De hecho la sintaxis del operador <tt>new</tt> es:</p>
<div align="center"><center>

<pre>new <font color="#009000"><b>llamada-constructor</b></font>    </pre>
</center></div>

<p align="left">Cuando el ordenador evalúa esta expresión, crea un nuevo objeto, ejecuta
el constructor, y devuelve una referencia al nuevo objeto.</p>

<p align="left">Como ejemplo, vamos a reescribir la clase <tt>Student</tt> que utilizamos
en la <a href="seccion4_1.htm" tppabs="http://members.nbci.com/elcurso/Capitulo4/seccion4_1.htm">sección anterior</a>:</p>

<pre>        public class Student {
        
           private String name;  // nombre del estudiante
           private int ID;  // identificador del estudiante
           public double test1, test2, test3;   // notas
           
           private static int nextUniqueID = 1;
                     // Proximo identificador disponible
           
           Student(String theName) {
                // constructor para objetos Studen;
                // carga el nombre del estudiante,
                // y asigna al estudiante el número
                // de identificacion (ID)
              name = theName;
              ID = nextUniqueID;
              nextUniqueID++;
           }
           
           public String getName() {
                // metodo accesorio para leer el valor de la
                // instancia de la variable privada, name
              return name;
           }
           
           public getID() {
                // Metodo para leer el valor de ID
              return ID;
           }
           
           public double getAverage() {  // Calcula la nota promedio
              return (test1 + test2 + test3) / 3;
           }
           
        }  // end of class Student</pre>

<p align="left">En esta versión de la clase, he facilitado un constructor, <tt>Student(String)</tt>.
Este constructor tiene un parámetro de tipo <tt>String</tt> para especificar el nombre
del estudiante. He transformado la variable instanciable <tt>name</tt> a <tt>private</tt>,
de esta manera tengo un completo control sobre este valor. Si examina la clase que el
valor de <tt>name</tt> solo puede ser asignado por el constructor y no hay forma de
cambiarlo: El nombre se asigna a <tt>Student</tt>en el momento en que se crea el objeto, y
permanece constante durante toda la vida del objeto.</p>

<p align="left">Dado que <tt>name</tt> es una variable <tt>private</tt>, he proporcionado
una función,<tt>getName()</tt>que puede ser llamada desde fuera de la clase para obtener
el nombre del estudiante. De esta forma, desde fuera de la clase es posible averiguar el
nombre del estudiante pero no se puede cambiar. Esta forma es la normal para controlar el
acceso a una variable.La instancia de la variable <tt>ID</tt> de la clase <tt>Student</tt>
trabaja de forma semejante.</p>

<p align="left">Debe saber, de todas formas, que si proporciona valores iniciales a la
instancia de una variable, estos valores se calculan antes de llamar al constructor. Es
muy normal el emplear una combinación de valores iniciales y constructores para &nbsp;
cargar un objeto nuevo con los valores que deba tener.</p>

<p align="left">Dado que el constructor de esta clase tiene un parámetro de tipo <tt>String</tt>,
deberemos incluir un valor de este tipo cuando realicemos la llamada al constructor. Aquí
tenemos algunos ejemplos del uso de este constructor para crear un nuevo objeto de la
clase <tt>Student</tt>:</p>

<pre>        std = new Student(&quot;John Smith&quot;);
        std1 = new Student(&quot;Mary Jones&quot;);</pre>

<p align="left">Probablemente se habrá dado cuenta que en la versión anterior de la
clase <tt>Student</tt> no se había incluido constructor. Y a pesar de eso, también
podíamos construir instancias de la clase usando el operador &quot;<tt>new Student()</tt>&quot;.
Existe una regla según la cual, si la clase no tienen ningún constructor, se crea
automáticamente uno por defecto, que no tiene parámetros. El <font color="#808000">constructor
por defecto</font> no puede hacer mas que rellenar las instancias de las variables con los
valores iniciales.</p>

<hr width="50%">

<p align="left">La única forma de acceder a un objeto, ya existente en la memoria, es a
través de la variable que guarda la referencia al objeto. Que le pasa a un objeto si no
hay ninguna variable que se refiera a él?. Considere las dos instrucciones siguientes
(Aunque en realidad, nunca debería hacer algo así):</p>

<pre>           Student std = new Student(&quot;John Smith&quot;);
           std = null;</pre>

<p align="left">En la primera línea, creamos un nuevo objeto <tt>Student</tt> y guardamos
la referencia en la variable <tt>std</tt>. Pero en la línea siguiente, cambiamos el calor
de <tt>std</tt>, y destruimos la referencia al objeto <tt>Student.</tt>En realidad no
existe ninguna variable mas que haga referencia al objeto ya esta, no la habíamos
guardado en ninguna otra variable. Siendo así, no hay ninguna posibilidad que el programa
pueda volver a emplear el objeto. Es como si no existiera. De hecho, la memoria ocupada
por el objeto puede ser reclamada para usarla en cualquier otro propósito.</p>

<p align="left">Java emplea un proceso llamado <font color="#808000"><em>garbage
collection</em> (recogida de desperdicios)</font> para recuperar la memoria ocupada por
los objetos que ya no pueden ser accedidos desde el programa. Es responsabilidad del
sistema, no del programador, el seguirle la pista a todos estos &quot;desperdicios&quot;.</p>

<p align="left">En muchos otros lenguajes de programación esto es responsabilidad del
programador. Desafortunadamente, el seguirle la pista al uso de memoria es una fuente muy
importante de errores, y muchos problemas en los programas vienen provocados por estos
errores. Un programador puede borrar accidentalmente un objeto aun cuando tenga todavía
referencias al objeto. Esto se llama&nbsp; un error de &quot;<em>dangling pointer</em>&quot;
o puntero falso y provoca el problema cuando el programa intenta acceder al objeto que ya
no existe. Otro tipo de problema es el de &quot;<em>memory leak</em>&quot; o fuga de
memoria, donde el programador de forma negligente, olvida ir borrando los objetos que ya
no necesita. Esto provoca que la memoria se vaya llenando con objetos que son totalmente
inaccesibles y el programa puede llegar a quedarse sin memoria, aunque en realidad haya
gran cantidad de ella desperdiciada.</p>

<p align="left">Gracias al sistema empleado en Java, de &quot;recolección de
desperdicios&quot;, es sencillamente imposible que ocurra este error . Puede que se
pregunte el porque de que todos los lenguajes no utilicen este metodo. En el pasado se
considero lento y antirentable. Sin embargo, la investigación en las técnicas de <em>garbage
collection</em> combinada con la increíble velocidad de los modernos ordenadores, han
conseguido que sea un sistema factible. Los programadores nos debemos alegrar.</p>

<hr>

<table border="0" width="100%" height="62" style="border-top: medium ridge">
  <tr>
    <td width="33%" height="58"><a href="seccion4_1.htm" tppabs="http://members.nbci.com/elcurso/Capitulo4/seccion4_1.htm"><img src="atras.gif" tppabs="http://members.nbci.com/elcurso/images/atras.gif" alt="Anterior" border="0" align="right" style="margin-top: 0px; margin-bottom: 0px" WIDTH="62" HEIGHT="62"></a></td>
    <td width="33%" height="58"><p align="center">&nbsp;&nbsp;&nbsp;&nbsp; <a href="indice4.htm" tppabs="http://members.nbci.com/elcurso/Capitulo4/indice4.htm"><img src="bicap.jpg" tppabs="http://members.nbci.com/elcurso/images/bicap.jpg" width="67" height="69" alt="Indice del Capitulo" border="0"></a><a href="indice.htm" tppabs="http://members.nbci.com/elcurso/indice.htm"><img src="bigen.jpg" tppabs="http://members.nbci.com/elcurso/images/bigen.jpg" width="66" height="68" alt="Indice General" border="0"></a></td>
    <td width="34%" height="58"><a href="Seccion4_3.htm" tppabs="http://members.nbci.com/elcurso/Capitulo4/Seccion4_3.htm"><img src="siguiente.gif" tppabs="http://members.nbci.com/elcurso/images/siguiente.gif" alt="Siguiente" align="left" border="0" WIDTH="57" HEIGHT="57"></a></td>
  </tr>
</table>
&nbsp;<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

</td></tr><!--msnavigation--></table></body>
</html>
